

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map.Entry;
import java.util.Stack;

/**
 * Created by Andrei on 28/8/15.
 * Modified by Yuri 09/2019
 * Builds a formula for alloy (that will later be printed to file) while traversing the 
 * graph built by the parser (from ir code generated by testgen)
 * In addition it is used by ConvertToRDMA constructor
 */
public class TranslateVisitor extends TLBaseVisitor<Object> {
    Stack<List<String>> actions_in_ifs;
    HashMap<String,LinkedList<String>> unpolled_actions; // targetThread->ordered list of unpolled actions
    TranslateValue result;
    int currentNodeNumber;
    int currentProcNumber;
    int counter; /* unique id for each action */
    int if_context_counter;
    String lastActionName;
	HashMap<String,String> lastGetWpMap;
	HashMap<String,String> lastRemoteWriteMap;
	HashMap<String,String> lastLocalReadMap;
	HashMap<String,MutableInt> swSizeMap;
    StringBuffer simpleExpressionBuffer;

    class MutableInt {
	  int value = 1; // note that we start at 1 since we're counting
	  public void increment () { ++value;      }
	  public int  get ()       { return value; }
	  
	  @Override
	  public String toString() {
			return new String("") + value;
	  }
	  MutableInt(int value){
		  this.value = value;
	  }
	}

    public TranslateVisitor(TranslateValue value) {
        this.actions_in_ifs = new Stack<List<String>>();
        this.unpolled_actions = new HashMap<>();
        this.result = value;
        this.currentProcNumber = -1;
        this.counter = 0;
        this.simpleExpressionBuffer = new StringBuffer();
        this.if_context_counter = 0;
    }

    @Override
    public Object visitNode(TLParser.NodeContext ctx) {
        int nodeNumber = Integer.parseInt(ctx.Number().getText());
        this.currentNodeNumber = nodeNumber;

        appendVarToBuffer("n" + nodeNumber, result.Nodes);
        result.programBuffer.append("\n/* Node " + nodeNumber + " */\n");
        result.nodesNumber++;
        visitChildren(ctx);
        return null;
    }

    @Override
    public Object visitProcess(TLParser.ProcessContext ctx) {
        int procNumber = Integer.parseInt(ctx.Number().getText());
        this.currentProcNumber = procNumber;

        appendVarToBuffer("p" + procNumber, result.Processes);
        result.programBuffer.append("\n/* Process " + procNumber + " */\n");
        this.lastActionName = null;
        this.lastGetWpMap = new HashMap<String,String>();
        this.lastRemoteWriteMap = new HashMap<String,String>();
        this.lastLocalReadMap = new HashMap<String,String>();
        this.swSizeMap = new HashMap<>();
        result.thrsNumber++;
        visitChildren(ctx);
        for(Entry<String, MutableInt> e : swSizeMap.entrySet()) {
            result.programBuffer.append("\n and #sw[" + e.getKey() + "]=" + e.getValue() + "\n");
        }
        return null;
    }

    @Override
    public Object visitSharedDecl(TLParser.SharedDeclContext ctx) {
        for (TLParser.VarDeclContext vCtx: ctx.varDeclList().varDecl()) {
            String writeVar = vCtx.Identifier().getText();
            String rhs = (vCtx.Number() == null)? "0": vCtx.Number().getText();

            String initValName = "iv" + counter;
            appendVarToBuffer(initValName, result.InitialValue);
            this.result.actionsNumber++;
            appendVarToBuffer(writeVar, result.MemoryLocation);

            result.programBuffer.append("\n /* " + vCtx.getText() + " */ \n");
            result.programBuffer.append("\n and o[" + initValName + "] = p" + currentProcNumber +
                                        "\n and wl[" + initValName + "] = " + writeVar +
                                        "\n and wV[" + initValName + "] = " + rhs +
                                        "\n and host[" + writeVar + "] = n" + currentNodeNumber + "\n");
            this.counter++;
        }


        return null;
    }

    static String encodeVarName(String originalName) {
        return originalName + "_VAR";
    }

    static String decodeVarName(String encodedName) {
        return encodedName.substring(0, encodedName.lastIndexOf("_VAR"));
    }

    @Override
    public Object visitLocalDecl(TLParser.LocalDeclContext ctx) {
        for (TLParser.VarDeclContext vCtx: ctx.varDeclList().varDecl()) {
            String localVar = vCtx.Identifier().getText();
            String rhs = (vCtx.Number() == null)? null: vCtx.Number().getText();

            appendVarToBuffer(encodeVarName(localVar), result.Integers);

            if (rhs != null) {
                result.programBuffer.append("\n /* " + vCtx.getText() + " */ \n");
                result.programBuffer.append("\n and " + encodeVarName(localVar) + " = " + rhs + "\n");
            }
        }
        return null;
    }


    private void appendPOtoProg(String actionName) {
        if (this.lastActionName != null) {
            result.programBuffer.append("\n and " + actionName + " = po[" + this.lastActionName + "]\n");
        }
        this.lastActionName = actionName;
    }

    private void appendFencedOpToSw(String nfName, String targetProcess) {
        if (this.lastGetWpMap.containsKey(targetProcess)) {
        	String lastGetWp=this.lastGetWpMap.get(targetProcess);
            result.programBuffer.append("\n and " + nfName + " in sw[" + lastGetWp + "]//nic-ord-sw\n");
            incInSwSizeMap(lastGetWp);
        }
    }

    private void appendGetToOrdSw(String nrpqName, String nwpName, String targetProcess) {
        if (this.lastRemoteWriteMap.containsKey(targetProcess)) {
        	String lastRemoteWrite=this.lastRemoteWriteMap.get(targetProcess);
            result.programBuffer.append("\n and " + nrpqName + " in sw[" + lastRemoteWrite + "]//nic-ord-sw\n");
            incInSwSizeMap(lastRemoteWrite);
        }
        this.lastGetWpMap.put(targetProcess, nwpName);
    }
    
    private void appendPutToOrdSw(String rpActionName,String wpqActionName, String targetProcess) {
        if (this.lastRemoteWriteMap.containsKey(targetProcess)) {
            String lastRemoteWrite = this.lastRemoteWriteMap.get(targetProcess);
			result.programBuffer.append("\n and " + wpqActionName + " in sw[" + lastRemoteWrite + "]//nic-ord-sw\n");
            incInSwSizeMap(lastRemoteWrite);
        }
        this.lastRemoteWriteMap.put(targetProcess,wpqActionName);
        if (this.lastLocalReadMap.containsKey(targetProcess)) {
            String lastLocalRead = this.lastLocalReadMap.get(targetProcess);
			result.programBuffer.append("\n and " + rpActionName + " in sw[" + lastLocalRead + "]//nic-ord-sw\n");
            incInSwSizeMap(lastLocalRead);
        }
        this.lastLocalReadMap.put(targetProcess,rpActionName);
    }

	private void incInSwSizeMap(String lastRemoteWrite) {
		MutableInt count = swSizeMap.get(lastRemoteWrite);
		if (count == null) {
			throw new RuntimeException("count for " + lastRemoteWrite + " doesn't exist!");
		}
		else {
		    count.increment();
		}
	}

    private void appendCasToOrdSw(String rwpqActionName, String targetProcess) {
        if (this.lastRemoteWriteMap.containsKey(targetProcess)) {
            String lastRemoteWrite = this.lastRemoteWriteMap.get(targetProcess);
			result.programBuffer.append("\n and " + rwpqActionName + " in sw[" + lastRemoteWrite + "]//nic-ord-sw\n");
            incInSwSizeMap(lastRemoteWrite);
        }
        this.lastRemoteWriteMap.put(targetProcess,rwpqActionName);    
    }

    private void appendRgaToOrdSw(String rwpqActionName, String targetProcess) {
    	appendCasToOrdSw(rwpqActionName,targetProcess);    
    }
    
    private void appendVarToBuffer(String var, StringBuffer buffer) {
        if (buffer.length() > 0) {
            buffer.append(", ");
        }
        buffer.append(var);
    }

    private void condAppend(String var, StringBuffer sb) {
        appendVarToBuffer(var, sb);
    }

    private void condTypePrint(String actionName, String type) {
        result.programBuffer.append("\n and " + actionName + " in " + type);
    }

	private void addUnpolledAction(String targetProcess, String wpName) {
		if (!this.unpolled_actions.containsKey(targetProcess)) {
        	this.unpolled_actions.put(targetProcess, new LinkedList<>());
        }
        this.unpolled_actions.get(targetProcess).addLast(wpName);
	}

    @Override
    public Object visitStore(TLParser.StoreContext ctx) {

        String writeVar = ctx.Identifier().getText();
        String rhs = ctx.rhs().getText();

        String storeName = "lw" + counter;

        result.programBuffer.append("\n /* " + ctx.getText() + " */ \n");

        if (if_context_counter == 0) {

        	condAppend(storeName, result.actionW);
        } else {

            appendVarToBuffer(storeName, result.Items);
            condTypePrint(storeName, "Write");
            actions_in_ifs.peek().add(storeName);
        }

        result.programBuffer.append("\n and o[" + storeName + "] = p" + currentProcNumber +
                "\n and d[" + storeName + "] = p" + currentProcNumber +
                "\n and wl[" + storeName + "] = " + writeVar +
                "\n and wV[" + storeName + "] = " + rhs);

          appendPOtoProg(storeName);
          this.result.actionsNumber++;
         this.counter++;
 
        return null;
    }

    @Override
    public Object visitLoad(TLParser.LoadContext ctx) {
        String lhs = ctx.Identifier(0).getText();
        String readVar = ctx.Identifier(1).getText();
        String loadName = "lr" + counter;

        result.programBuffer.append("\n /* " + ctx.getText() + " */ \n");
        if (if_context_counter == 0) {

            condAppend(loadName, result.actionR);
        } else {

            appendVarToBuffer(loadName, result.Items);
            condTypePrint(loadName, "Read");
            actions_in_ifs.peek().add(loadName);
        }

        result.programBuffer.append("\n and o[" + loadName + "] = p" + currentProcNumber +
                "\n and d[" + loadName + "] = p" + currentProcNumber +
                "\n and rl[" + loadName + "] = " + readVar +
                "\n and reg[" + loadName + "] = " + encodeVarName(lhs));
        appendPOtoProg(loadName);
        this.result.actionsNumber++;
        this.counter++;

        return null;
    }

    @Override
    public Object visitGet(TLParser.GetContext ctx) {
        int destProcessNumber = Integer.parseInt(ctx.Number().getText());
        String targetProcess = "p" + destProcessNumber;
        String writeVar = ctx.Identifier(0).getText();
        String readVar = ctx.Identifier(1).getText();
        String sxName = "vsx" + counter;
        String rpqName = "vrpq" + counter;
        String wpName = "vwp" + counter;
        
        this.swSizeMap.put(wpName, new MutableInt(0));
        this.swSizeMap.put(rpqName, new MutableInt(1));
        
        result.programBuffer.append("\n /* " + ctx.getText() + " */ \n");

        if (if_context_counter == 0) {

            condAppend(sxName, result.actionSx);
            condAppend(rpqName, result.actionRpq);
            condAppend(wpName, result.actionWp);
        } else {

            appendVarToBuffer(sxName, result.Items);
            appendVarToBuffer(rpqName, result.Items);
            appendVarToBuffer(wpName, result.Items);
            condTypePrint(sxName, "Sx");
            condTypePrint(rpqName, "nRpq");
            condTypePrint(wpName, "nWp");
            actions_in_ifs.peek().add(sxName);
            actions_in_ifs.peek().add(rpqName);
            actions_in_ifs.peek().add(wpName);
        }

        result.programBuffer.append(
        		"\n and o[" + sxName + "] = p" + currentProcNumber +
                "\n and d[" + sxName + "] = p" + destProcessNumber +
                "\n and o[" + rpqName + "] = p" + currentProcNumber +
                "\n and d[" + rpqName + "] = p" + destProcessNumber +
                "\n and rl[" + rpqName + "] = " + readVar +
                "\n and " + rpqName + " in sw[" + sxName + "]//nic-inst-sw" +
                "\n and #sw[" + sxName + "]=1" +
                "\n and o[" + wpName + "] = p" + currentProcNumber +
                "\n and d[" + wpName + "] = p" + currentProcNumber +
                "\n and " + wpName + " in sw[" + rpqName + "]//nic-inst-sw" +
                "\n and wl[" + wpName + "] = " + writeVar +
                "\n and wV[" + wpName + "] = rV[" + rpqName + "]");
        appendGetToOrdSw(rpqName, wpName, targetProcess);
        addUnpolledAction(targetProcess, wpName);
        appendPOtoProg(sxName);
        this.result.actionsNumber+=3;
        this.counter++;

        return null;
    }


    @Override
    public Object visitGetF(TLParser.GetFContext ctx) {
        int destProcessNumber = Integer.parseInt(ctx.Number().getText());
        String targetProcess = "p" + destProcessNumber;
        String writeVar = ctx.Identifier(0).getText();
        String readVar = ctx.Identifier(1).getText();
        String sxName = "vsx" + counter;
        String nfName = "vnf" + counter;
        String rpqName = "vrpq" + counter;
        String wpName = "vwp" + counter;
        
        this.swSizeMap.put(wpName, new MutableInt(0));
        this.swSizeMap.put(rpqName, new MutableInt(1));
        
        result.programBuffer.append("\n /* " + ctx.getText() + " */ \n");

        if (if_context_counter == 0) {

            condAppend(sxName, result.actionSx);
            condAppend(rpqName, result.actionRpq);
            condAppend(wpName, result.actionWp);
            condAppend(nfName, result.actionNf);
        } else {

            appendVarToBuffer(sxName, result.Items);
            appendVarToBuffer(nfName, result.Items);
            appendVarToBuffer(rpqName, result.Items);
            appendVarToBuffer(wpName, result.Items);
            condTypePrint(sxName, "Sx");
            condTypePrint(nfName, "nF");
            condTypePrint(rpqName, "nRpq");
            condTypePrint(wpName, "nWp");
            actions_in_ifs.peek().add(sxName);
            actions_in_ifs.peek().add(nfName);
            actions_in_ifs.peek().add(rpqName);
            actions_in_ifs.peek().add(wpName);
        }

        result.programBuffer.append(
        		"\n and o[" + sxName + "] = p" + currentProcNumber +
                "\n and d[" + sxName + "] = p" + destProcessNumber +
        		"\n and o[" + nfName + "] = p" + currentProcNumber +
                "\n and d[" + nfName + "] = p" + currentProcNumber +
                "\n and o[" + rpqName + "] = p" + currentProcNumber +
                "\n and d[" + rpqName + "] = p" + destProcessNumber +
                "\n and rl[" + nfName + "] = " + readVar +
                "\n and " + rpqName + " in sw[" + sxName + "]//nic-inst-sw" +
                "\n and #sw[" + sxName + "]=1" +
                "\n and " + rpqName + " in sw[" + nfName + "]//nic-inst-sw" +
                "\n and #sw[" + nfName + "]=1" +
                "\n and o[" + wpName + "] = p" + currentProcNumber +
                "\n and d[" + wpName + "] = p" + currentProcNumber +
                "\n and " + wpName + " in sw[" + rpqName + "]//nic-inst-sw" +
                "\n and wl[" + wpName + "] = " + writeVar +
                "\n and wV[" + wpName + "] = rV[" + rpqName + "]");
        appendFencedOpToSw(nfName, targetProcess);
        appendGetToOrdSw(rpqName,wpName, targetProcess);
        addUnpolledAction(targetProcess, wpName);
        appendPOtoProg(sxName);
        this.result.actionsNumber+=3;
        this.counter++;

        return null;
    }

    @Override
    public Object visitPutF(TLParser.PutFContext ctx) {
        int destProcessNumber = Integer.parseInt(ctx.Number().getText());
        String targetProcess = "p" + destProcessNumber;
        String writeVar = ctx.Identifier(0).getText();
        String readVar = ctx.Identifier(1).getText();
        String sxName = "vsx" + counter;
        String nfName = "vnf" + counter;
        String rpName = "vrp" + counter;
        String wpqName = "vwpq" + counter;
        
        this.swSizeMap.put(wpqName, new MutableInt(0)); 
        this.swSizeMap.put(rpName, new MutableInt(1));

        result.programBuffer.append("\n /* " + ctx.getText() + " */ \n");

        if (if_context_counter == 0) {
        	
            condAppend(sxName, result.actionSx);
            condAppend(nfName, result.actionNf);
            condAppend(rpName, result.actionRp);
            condAppend(wpqName, result.actionWpq);
        } else {

            appendVarToBuffer(sxName, result.Items);
            appendVarToBuffer(nfName, result.Items);
            appendVarToBuffer(rpName, result.Items);
            appendVarToBuffer(wpqName, result.Items);
            condTypePrint(sxName, "Sx");
            condTypePrint(nfName, "nF");
            condTypePrint(rpName, "nRp");
            condTypePrint(wpqName, "nWpq");
            actions_in_ifs.peek().add(sxName);
            actions_in_ifs.peek().add(nfName);
            actions_in_ifs.peek().add(rpName);
            actions_in_ifs.peek().add(wpqName);
        }

		result.programBuffer.append(
                "\n and o[" + sxName + "] = p" + currentProcNumber +
                "\n and d[" + sxName + "] = " + targetProcess + 
                "\n and o[" + rpName + "] = p" + currentProcNumber +
                "\n and d[" + rpName + "] = p" + currentProcNumber +
                "\n and rl[" + rpName + "] = " + readVar +
                "\n and " + nfName + " in sw[" + sxName + "]//nic-inst-sw" +
                "\n and #sw[" + sxName + "]=1" +
                "\n and " + rpName + " in sw[" + nfName + "]//nic-inst-sw" +
                "\n and #sw[" + nfName + "]=1" +
                "\n and " + wpqName + " in sw[" + rpName + "]//nic-inst-sw" +
                "\n and o[" + wpqName + "] = p" + currentProcNumber +
                "\n and d[" + wpqName + "] = p" + destProcessNumber +
                "\n and wl[" + wpqName + "] = " + writeVar +
                "\n and wV[" + wpqName + "] = rV[" + rpName + "]");
        appendPutToOrdSw(rpName, wpqName, targetProcess);
        appendFencedOpToSw(nfName, targetProcess);
        addUnpolledAction(targetProcess, wpqName);
        appendPOtoProg(sxName);
        this.counter++;
        this.result.actionsNumber+=3;

        return null;
    }

    @Override
    public Object visitPut(TLParser.PutContext ctx) {
        int destProcessNumber = Integer.parseInt(ctx.Number().getText());
        String targetProcess = "p" + destProcessNumber;
        String writeVar = ctx.Identifier(0).getText();
        String readVar = ctx.Identifier(1).getText();
        String sxName = "vsx" + counter;
        String rpName = "vrp" + counter;
        String wpqName = "vwpq" + counter;
        
        this.swSizeMap.put(wpqName, new MutableInt(0)); 
        this.swSizeMap.put(rpName, new MutableInt(1));

        result.programBuffer.append("\n /* " + ctx.getText() + " */ \n");

        if (if_context_counter == 0) {
        	
            condAppend(sxName, result.actionSx);
            condAppend(rpName, result.actionRp);
            condAppend(wpqName, result.actionWpq);
        } else {

            appendVarToBuffer(sxName, result.Items);
            appendVarToBuffer(rpName, result.Items);
            appendVarToBuffer(wpqName, result.Items);
            condTypePrint(sxName, "Sx");
            condTypePrint(rpName, "nRp");
            condTypePrint(wpqName, "nWpq");
            actions_in_ifs.peek().add(sxName);
            actions_in_ifs.peek().add(rpName);
            actions_in_ifs.peek().add(wpqName);
        }

		result.programBuffer.append(
                "\n and o[" + sxName + "] = p" + currentProcNumber +
                "\n and d[" + sxName + "] = " + targetProcess + 
                "\n and o[" + rpName + "] = p" + currentProcNumber +
                "\n and d[" + rpName + "] = p" + currentProcNumber +
                "\n and rl[" + rpName + "] = " + readVar +
                "\n and " + rpName + " in sw[" + sxName + "]//nic-inst-sw" +
                "\n and #sw[" + sxName + "]=1" +
                "\n and " + wpqName + " in sw[" + rpName + "]//nic-inst-sw" +
                "\n and o[" + wpqName + "] = p" + currentProcNumber +
                "\n and d[" + wpqName + "] = p" + destProcessNumber +
                "\n and wl[" + wpqName + "] = " + writeVar +
                "\n and wV[" + wpqName + "] = rV[" + rpName + "]");
        appendPutToOrdSw(rpName, wpqName, targetProcess);
        addUnpolledAction(targetProcess, wpqName);
        appendPOtoProg(sxName);
        this.counter++;
        this.result.actionsNumber+=3;

        return null;
    }

    @Override
    public Object visitRga(TLParser.RgaContext ctx) {
        int destProcessNumber = Integer.parseInt(ctx.Number(0).getText());
        int updateVal = Integer.parseInt(ctx.Number(1).getText());
        String targetProcess = "p" + destProcessNumber;
        String writeVar = ctx.Identifier(0).getText();
        String readWriteVar = ctx.Identifier(1).getText();
        String sxName = "vsx" + counter;
        String rwpqName = "vrwpq" + counter;
        String wpName = "vwp" + counter;


        this.swSizeMap.put(rwpqName, new MutableInt(1));
        this.swSizeMap.put(wpName, new MutableInt(0)); 

        result.programBuffer.append("\n /* " + ctx.getText() + " */ \n");

        if (if_context_counter == 0) {
            condAppend(sxName, result.actionSx);
            condAppend(rwpqName, result.actionRWpq);
            condAppend(wpName, result.actionWp);
        } else {

            appendVarToBuffer(sxName, result.Items);
            appendVarToBuffer(rwpqName, result.Items);
            appendVarToBuffer(wpName, result.Items);
            condTypePrint(sxName, "Sx");
            condTypePrint(rwpqName, "nRWpq");
            condTypePrint(wpName, "nWp");
            actions_in_ifs.peek().add(sxName);
            actions_in_ifs.peek().add(rwpqName);
            actions_in_ifs.peek().add(wpName);
        }

		result.programBuffer.append("\n and o[" + sxName + "] = p" + currentProcNumber +
                "\n and d[" + sxName + "] = "+ targetProcess +
                "\n and " + rwpqName + " in sw[" + sxName + "]//nic-inst-sw" +
                "\n and #sw[" + sxName + "]=1" +
                "\n and " + wpName + " in sw[" + rwpqName + "]//nic-inst-sw" +

                "\n and o[" + rwpqName + "] = p" + currentProcNumber +
                "\n and d[" + rwpqName + "] = p" + destProcessNumber +
                "\n and wl[" + rwpqName + "] = " + readWriteVar +
                "\n and wV[" + rwpqName + "] = rV[" + rwpqName + "].plus[" + updateVal + "]" +

                "\n and o[" + wpName + "] = p" + currentProcNumber +
                "\n and d[" + wpName + "] = p" + currentProcNumber +
                "\n and wl[" + wpName + "] = " + writeVar +
                "\n and wV[" + wpName + "] = rV[" + rwpqName + "]");
        
		appendRgaToOrdSw(rwpqName, targetProcess);
        addUnpolledAction(targetProcess, wpName);
        appendPOtoProg(sxName);
        this.counter++;
        this.result.actionsNumber+=3;

        return null;
    }

    @Override
    public Object visitCas(TLParser.CasContext ctx) {
        int destProcessNumber = Integer.parseInt(ctx.Number(0).getText());
        String targetProcess = "p" + destProcessNumber;
        int targetValue = Integer.parseInt(ctx.Number(1).getText());
        int newValue = Integer.parseInt(ctx.Number(2).getText());
        String writeVar = ctx.Identifier(0).getText(); 
        String readCompareVar = ctx.Identifier(1).getText();

        String sxName = "vsx" + counter;
        String rwpqName = "vrwpq" + counter;
        String wpName = "vwp" + counter;

        this.swSizeMap.put(rwpqName, new MutableInt(1)); 
        this.swSizeMap.put(wpName, new MutableInt(0));
        
        result.programBuffer.append("\n /*" + ctx.getText() + " */ \n");

        if (if_context_counter == 0) {
            condAppend(sxName, result.actionSx);
            condAppend(rwpqName, result.actionRWpq);
            condAppend(wpName, result.actionWp);
        } else {
            appendVarToBuffer(sxName, result.Items);
            appendVarToBuffer(rwpqName, result.Items);
            appendVarToBuffer(wpName, result.Items);

            condTypePrint(sxName, "Sx");
            condTypePrint(rwpqName, "nRWpq");
            condTypePrint(wpName, "nWp");

            actions_in_ifs.peek().add(sxName);
            actions_in_ifs.peek().add(rwpqName);
            actions_in_ifs.peek().add(wpName);
        }

		result.programBuffer.append(
                	"\n and o[" + sxName + "] = p" + currentProcNumber +
                	"\n and d[" + sxName + "] = " + targetProcess + 
                	"\n and o[" + rwpqName + "] = p" + currentProcNumber +
                    "\n and d[" + rwpqName + "] = " + targetProcess +
                    "\n and rl[" + rwpqName + "] = " + readCompareVar +
                    "\n and " + rwpqName + " in sw[" + sxName + "]//nic-inst-sw" +
                    "\n and #sw[" + sxName + "]=1" +

                    "\n and ((rV[" + rwpqName + "]= " + targetValue + ") implies" +
                    "\n (wV[" + rwpqName + "] = " + newValue + ") else" +
                    "\n (wV[" + rwpqName + "] = rV[" + rwpqName + "]))" +

                    "\n and o[" + wpName + "] = p" + currentProcNumber +
                    "\n and d[" + wpName + "] = p" + currentProcNumber +
                    "\n and wl[" + wpName + "] = " + writeVar +
                    "\n and wV[" + wpName + "] = rV[" + rwpqName +"]" +
                    "\n and " + wpName + " in sw[" + rwpqName + "]//nic-inst-sw");

		appendCasToOrdSw(rwpqName, targetProcess);
        addUnpolledAction(targetProcess, wpName);
        appendPOtoProg(sxName);
        this.counter++;
        this.result.actionsNumber+=3;


        return null;
    }

    @Override
    public Object visitRgaF(TLParser.RgaFContext ctx) {
        int destProcessNumber = Integer.parseInt(ctx.Number(0).getText());
        int updateVal = Integer.parseInt(ctx.Number(1).getText());
        String targetProcess = "p" + destProcessNumber;
        String writeVar = ctx.Identifier(0).getText();
        String readWriteVar = ctx.Identifier(1).getText();
        String sxName = "vsx" + counter;
        String nfName = "vnf" + counter;
        String rwpqName = "vrwpq" + counter;
        String wpName = "vwp" + counter;


        this.swSizeMap.put(rwpqName, new MutableInt(1));
        this.swSizeMap.put(wpName, new MutableInt(0)); 

        result.programBuffer.append("\n /* " + ctx.getText() + " */ \n");

        if (if_context_counter == 0) {
            condAppend(sxName, result.actionSx);
            condAppend(nfName, result.actionNf);
            condAppend(rwpqName, result.actionRWpq);
            condAppend(wpName, result.actionWp);
        } else {

            appendVarToBuffer(sxName, result.Items);
            appendVarToBuffer(nfName, result.Items);
            appendVarToBuffer(rwpqName, result.Items);
            appendVarToBuffer(wpName, result.Items);
            condTypePrint(sxName, "Sx");
            condTypePrint(nfName, "nF");
            condTypePrint(rwpqName, "RWpq");
            condTypePrint(wpName, "Wp");
            actions_in_ifs.peek().add(sxName);
            actions_in_ifs.peek().add(nfName);
            actions_in_ifs.peek().add(rwpqName);
            actions_in_ifs.peek().add(wpName);
        }

		result.programBuffer.append(
				"\n and o[" + sxName + "] = p" + currentProcNumber +
                "\n and d[" + sxName + "] = "+ targetProcess +
        		"\n and o[" + nfName + "] = p" + currentProcNumber +
                "\n and d[" + nfName + "] = p" + currentProcNumber +
                "\n and " + nfName + " in sw[" + sxName + "]//nic-inst-sw" +
                "\n and #sw[" + sxName + "]=1" +
                "\n and " + rwpqName + " in sw[" + nfName + "]//nic-inst-sw" +
                "\n and #sw[" + nfName + "]=1" +
                "\n and " + wpName + " in sw[" + rwpqName + "]//nic-inst-sw" +

                "\n and o[" + rwpqName + "] = p" + currentProcNumber +
                "\n and d[" + rwpqName + "] = p" + destProcessNumber +
                "\n and wl[" + rwpqName + "] = " + readWriteVar +
                "\n and wV[" + rwpqName + "] = rV[" + rwpqName + "].plus[" + updateVal + "]" +

                "\n and o[" + wpName + "] = p" + currentProcNumber +
                "\n and d[" + wpName + "] = p" + currentProcNumber +
                "\n and wl[" + wpName + "] = " + writeVar +
                "\n and wV[" + wpName + "] = rV[" + rwpqName + "]");

        appendFencedOpToSw(nfName, targetProcess);
		appendRgaToOrdSw(rwpqName, targetProcess);
        addUnpolledAction(targetProcess, wpName);
        appendPOtoProg(sxName);
        this.counter++;
        this.result.actionsNumber+=3;

        return null;
    }

    @Override
    public Object visitCasF(TLParser.CasFContext ctx) {
        int destProcessNumber = Integer.parseInt(ctx.Number(0).getText());
        String targetProcess = "p" + destProcessNumber;
        int targetValue = Integer.parseInt(ctx.Number(1).getText());
        int newValue = Integer.parseInt(ctx.Number(2).getText());
        String writeVar = ctx.Identifier(0).getText(); 
        String readCompareVar = ctx.Identifier(1).getText();

        String sxName = "vsx" + counter;
        String nfName = "vnf" + counter;
        String rwpqName = "vrwpq" + counter;
        String wpName = "vwp" + counter;

        this.swSizeMap.put(rwpqName, new MutableInt(1)); 
        this.swSizeMap.put(wpName, new MutableInt(0));
        
        result.programBuffer.append("\n /*" + ctx.getText() + " */ \n");

        if (if_context_counter == 0) {
            condAppend(sxName, result.actionSx);
            condAppend(nfName, result.actionNf);
            condAppend(rwpqName, result.actionRWpq);
            condAppend(wpName, result.actionWp);
        } else {
            appendVarToBuffer(sxName, result.Items);
            appendVarToBuffer(nfName, result.Items);
            appendVarToBuffer(rwpqName, result.Items);
            appendVarToBuffer(wpName, result.Items);

            condTypePrint(sxName, "Sx");
            condTypePrint(nfName, "nF");
            condTypePrint(rwpqName, "RWpq");
            condTypePrint(wpName, "Wp");

            actions_in_ifs.peek().add(sxName);
            actions_in_ifs.peek().add(nfName);
            actions_in_ifs.peek().add(rwpqName);
            actions_in_ifs.peek().add(wpName);
        }

		result.programBuffer.append(
                	"\n and o[" + sxName + "] = p" + currentProcNumber +
                	"\n and d[" + sxName + "] = " + targetProcess + 
            		"\n and o[" + nfName + "] = p" + currentProcNumber +
                    "\n and d[" + nfName + "] = p" + currentProcNumber +
                	"\n and o[" + rwpqName + "] = p" + currentProcNumber +
                    "\n and d[" + rwpqName + "] = " + targetProcess +
                    "\n and rl[" + rwpqName + "] = " + readCompareVar +
                    "\n and " + nfName + " in sw[" + sxName + "]//nic-inst-sw" +
                    "\n and #sw[" + sxName + "]=1" +
                    "\n and " + rwpqName + " in sw[" + nfName + "]//nic-inst-sw" +
                    "\n and #sw[" + nfName + "]=1" +
                    "\n and ((rV[" + rwpqName + "]= " + targetValue + ") implies" +
                    "\n (wV[" + rwpqName + "] = " + newValue + ") else" +
                    "\n (wV[" + rwpqName + "] = rV[" + rwpqName + "]))" +

                    "\n and o[" + wpName + "] = p" + currentProcNumber +
                    "\n and d[" + wpName + "] = p" + currentProcNumber +
                    "\n and wl[" + wpName + "] = " + writeVar +
                    "\n and wV[" + wpName + "] = rV[" + rwpqName +"]" +
                    "\n and " + wpName + " in sw[" + rwpqName + "]//nic-inst-sw");

		appendCasToOrdSw(rwpqName, targetProcess);
        appendFencedOpToSw(nfName, targetProcess);
        addUnpolledAction(targetProcess, wpName);
        appendPOtoProg(sxName);
        this.counter++;
        this.result.actionsNumber+=3;


        return null;
    }

    @Override    
    public Object visitPollcq(TLParser.PollcqContext ctx){
        int destProcessNumber = Integer.parseInt(ctx.Number().getText());
        String targetProcess = "p" + destProcessNumber;

        String pcqName = "pcq" + counter;

        result.programBuffer.append("\n /*" + ctx.getText() + " */ \n");
        
        if (if_context_counter == 0) {
            condAppend(pcqName, result.actionPollCQ);
        } else {
            appendVarToBuffer(pcqName, result.Items);

            condTypePrint(pcqName, "poll_cq");

            actions_in_ifs.peek().add(pcqName);
        }
        
         
        if (!this.unpolled_actions.containsKey(targetProcess)) {
        	throw new RuntimeException("Reached a poll_cq with no previous rdma operations");
        }
        if (this.unpolled_actions.get(targetProcess).isEmpty()) {
        	throw new RuntimeException("Reached a poll_cq with no pending rdma operations");
        }
        String unpolled = this.unpolled_actions.get(targetProcess).pop();

        result.programBuffer.append("\n and " + pcqName + " in sw[" + unpolled + "]//poll-cq-sw\n");
        incInSwSizeMap(unpolled);
        appendPOtoProg(pcqName);
        this.result.actionsNumber++;
        
        return null;    	
    }
    public Object visitRhs(TLParser.RhsContext ctx) {
        if (ctx.Number() != null) {
            simpleExpressionBuffer.append(ctx.getText());
        } else {
            simpleExpressionBuffer.append(ctx.getText() + ".value");
        }
        return null;
    }

    public Object visitSimpleExpression(TLParser.SimpleExpressionContext ctx) {
        if (ctx.And() != null) {
            /* simpleExpression And simpleExpression*/
            simpleExpressionBuffer.append("(");
            visitSimpleExpression(ctx.simpleExpression(0));
            simpleExpressionBuffer.append(" and ");
            visitSimpleExpression(ctx.simpleExpression(1));
            simpleExpressionBuffer.append(")");

        } else if (ctx.Or() != null) {
            /* simpleExpression Or simpleExpression */
            simpleExpressionBuffer.append("(");
            visitSimpleExpression(ctx.simpleExpression(0));
            simpleExpressionBuffer.append(" or ");
            visitSimpleExpression(ctx.simpleExpression(1));
            simpleExpressionBuffer.append(")");

        } else if (ctx.Excl() != null) {
            /* Excl simpleExpression */
            simpleExpressionBuffer.append("not (");
            visitSimpleExpression(ctx.simpleExpression(0));
            simpleExpressionBuffer.append(")");

        } else if (ctx.OParen() != null) {
            /* OParen simpleExpression CParen */
            simpleExpressionBuffer.append("(");
            visitSimpleExpression(ctx.simpleExpression(0));
            simpleExpressionBuffer.append(")");

        }else if (ctx.Equals() != null) {
            /* Identifier Equals rhs */
            simpleExpressionBuffer.append(encodeVarName(ctx.Identifier().getText()) + ".value = " );
            visitRhs(ctx.rhs());

        } else if (ctx.NEquals() != null) {
            /* Identifier NEquals rhs */
            simpleExpressionBuffer.append("(not (" + encodeVarName(ctx.Identifier().getText()) + ".value = " );
            visitRhs(ctx.rhs());
            simpleExpressionBuffer.append("))");

        } else {
            System.err.println("Error");
            System.exit(1);
        }
        return null;
    }

    public Object visitAssumption(TLParser.AssumptionContext ctx) {
        /* Reset the buffer */
        simpleExpressionBuffer.setLength(0);

        visitSimpleExpression(ctx.simpleExpression());

        /* Append buffer to result */
        result.programBuffer.append("\n /* " + ctx.getText() + " */ \n");
        result.programBuffer.append("\n and " + simpleExpressionBuffer.toString());

        // System.out.println("Assumption found: " + simpleExpressionBuffer.toString());

        return null;
    }

    public Object visitAssertion(TLParser.AssertionContext ctx) {
        /* Reset the buffer */
        simpleExpressionBuffer.setLength(0);

        visitSimpleExpression(ctx.simpleExpression());

        /* Append buffer to result */
        if (result.Assertion.length() > 0) {
            result.Assertion.append(" and " + "(" + simpleExpressionBuffer + ")");
        } else {
            result.Assertion.append("(" + simpleExpressionBuffer + ")");
        }

        // System.out.println("Assertion found: " + result.Assertion.toString());

        return null;
    }



    public Object visitIfStatement(TLParser.IfStatementContext ctx) {
        simpleExpressionBuffer.setLength(0);

        List<String> actions = new ArrayList<String>();
        actions_in_ifs.push(actions);

        /* enter if context */
        this.if_context_counter += 1;

        visitSimpleExpression(ctx.simpleExpression());

        /* append if to result */
        result.programBuffer.append("\n /* if " + simpleExpressionBuffer.toString() + " */ \n");
        result.programBuffer.append("\n and ((" + simpleExpressionBuffer.toString() + ") implies ((1 = 1) ");


        visitBlock(ctx.block());

        result.programBuffer.append("\n) else ((1 = 1) ");

        for (String action : actions) {
            result.programBuffer.append("\n and " + action + " in Item-Action");
        }

        result.programBuffer.append("\n))");

        actions_in_ifs.pop();
        if (!actions_in_ifs.empty()) {
            actions_in_ifs.peek().addAll(actions);
        }


        /* leave if context */
        this.if_context_counter -= 1;
        return null;
    }
}
